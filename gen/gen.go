package gen

import (
	"log"
	"os"
	"path"
	"text/template"
	"time"
	"fmt"
	"io/ioutil"
)

// Gen presents a generate tool for swag.
type Gen struct {
}

// New creates a new Gen.
func New() *Gen {
	return &Gen{}
}

// Build builds swagger json file  for gived searchDir and mainApiFile.
func (g *Gen) Build(searchDir string, swaggerJsonFile string) error {
	log.Println("Generate swagger docs....")

	if fi, err := os.Stat(swaggerJsonFile); err == nil {
		if fi.IsDir() {
			return fmt.Errorf("expected %q to be a file not a directory", swaggerJsonFile)
		}
	}

	b, err := ioutil.ReadFile(swaggerJsonFile)
	if err != nil {
		return err
	}

	os.MkdirAll(path.Join(searchDir, "docs"), os.ModePerm)
	docs, _ := os.Create(path.Join(searchDir, "docs", "docs.go"))
	defer docs.Close()

	packageTemplate.Execute(docs, struct {
		Timestamp time.Time
		Doc       string
	}{
		Timestamp: time.Now(),
		Doc:       "`" + string(b) + "`",
	})

	log.Printf("create docs.go at  %+v", docs.Name())
	return nil
}

var packageTemplate = template.Must(template.New("").Parse(`// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by macaron-swagger/macaron-swag at
// {{ .Timestamp }}

package docs

import (
	"github.com/fengbeihong/macaron-swagger"
)

var doc = {{.Doc}}

type s struct{}

func (s *s) ReadDoc() string {
	return doc
}
func init() {
	macaronSwagger.Register(macaronSwagger.Name, &s{})
}
`))
